<!DOCTYPE html>
<html>
<head>
    <title>PRB Dashboard</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Sun Jan 17 2016 12:57:51 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Sun Jan 17 2016 12:57:51 GMT-0700 (MST)";
        var CHECKSUM = 3718167018;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.prbDashboard.Template',{
    extend: 'Ext.XTemplate',

    tbdText: 'TBD',

    getHealthColor: function(field, values){
        var color = values[field] || '#FFFFFF';
        return color;
    },

    config: {

    },

    constructor: function(config) {
       var templateConfig = [
           '<tpl>',
           '<table>',
                '<tr>',
                    '<th width="25%">BU/CRG - Project Title</th>',
                    '<th width="25%">Sponsors (S), (EC)</br>Project Manager (PM), BU Lead (BL)</th>',
                    '<th width="15%">Start Date (S)</br>Release (R)</br>End Date (E)</th>',
                    '<th width="20%">Next Key Milestone</th>',
                    '<th colspan="6">Project Health:</br><span style="text-decoration:underline;">T</span>imeline, <em>S</em>cope, <em>Q</em>uality, <em>R</em>esources, <em>B</em>udget Spend, <em>C</em>hange (BU/CRG)</th>',
                '</tr>',
                '<tr>',
                    '<td rowspan="2">{[values[this.buField]]} - {[values[this.projectField]]}</td>',
                    '<td>',
                        '<tpl if="values[this.sponsorField]">{[values[this.sponsorField]]} (S)</br></tpl>',
                        '<tpl if="values[this.ecField]">{[values[this.ecField]]} (EC)</br></tpl>',
                        '<tpl if="values[this.pmField]">{[values[this.pmField]]} (PM)</br></tpl>',
                        '<tpl if="values[this.blField]">{[values[this.blField]]} (BL)</br></tpl>',
                    '</td>',
                    '<td>',
                        '<tpl if="values[this.startDateField]">{[values[this.startDateField]]} (S)<tpl else>{[this.tbdText]}</tpl></br>',
                        '<tpl if="values[this.releaseDateField]">{[values[this.releaseDateField]]} (R)<tpl else>{[this.tbdText]}</tpl></br>',
                        '<tpl if="values[this.endDateField]">{[values[this.endDateField]]} (E)<tpl else>{[this.tbdText]}</tpl></br>',
                    '</td>',
                    '<td>{[values[this.nextKeyMilestoneField]]}</td>',
                    '<td style="background-color:{[this.getHealthColor(this.projectHealthField, values)]};">H</td>',
                    '<td colspan="5">{[values[this.budgetField]]}</td>',
                '</tr>',
               '<tr>',
                   '<td>',
                       '<tpl if="values[this.vsmField]">{[values[this.vsmField]]} (VSM),</tpl>',
                       '<tpl if="values[this.sltField]">{[values[this.sltField]]} (SLT)</tpl>',
                   '</td>',
                   '<td>',
                       '<tpl if="values[this.linkField]"><a href="{[values[this.linkField]]}">Status Report</a></tpl>',
                   '</td>',
                   '<td>',
                        '<tpl if="values[this.budgetField]">Budget Spend:  {[values[this.budgetField]]}</tpl>',
                    '</td>',
                   '<td style="background-color:{[this.getHealthColor(this.projectHealthTimelineField, values)]};">T</td>',
                   '<td style="background-color:{[this.getHealthColor(this.projectHealthScopeField, values)]};">S</td>',
                   '<td style="background-color:{[this.getHealthColor(this.projectHealthQualityField, values)]};">Q</td>',
                   '<td style="background-color:{[this.getHealthColor(this.projectHealthResourcesField, values)]};">R</td>',
                   '<td style="background-color:{[this.getHealthColor(this.projectHealthBudgetSpendField, values)]};">B</td>',
                   '<td style="background-color:{[this.getHealthColor(this.projectHealthChangeField, values)]};">C</td>',
           '</tr>',
           '</table>',
           '</tpl>'
       ];

        templateConfig.push(this.config);
        templateConfig.push(config);

        return this.callParent(templateConfig);
    }
});

Ext.define('Rally.technicalservices.prbDashboard.Settings',{

    getFieldMappings: function(){
        return {
            buField: 'BU',
            projectField: 'Project',
            sponsorField: 'S',
            ecField: 'EC',
            pmField: 'PM',
            blField: 'BL',
            sltField: 'SLT',
            vsmField: 'VSM',
            startDateField: 'StartDate',
            endDateField: 'EndDate',
            releaseDateField: 'Release',
            nextKeyMilestoneField: 'NextKeyMilestone',
            projectHealthField: 'ProjectHealth',
            projectHealthTimelineField: 'ProjectHealthTimeline',
            projectHealthScopeField: 'ProjectHealthScope',
            projectHealthQualityField: 'ProjectHealthQuality',
            projectHealthResourcesField: 'ProjectHealthResources',
            projectHealthBudgetSpendField: 'ProjectHealthBudgetSpend',
            projectHealthChangeField: 'ProjectHealthChange',
            budgetField: 'Budget',
            linkField: 'LinkField'
        };
    }
});

Ext.define("prb-dashboard", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'message_box',tpl:'Hello, <tpl>{_refObjectName}</tpl>'},
        {xtype:'container',itemId:'display_box'}
    ],

    integrationHeaders : {
        name : "prb-dashboard"
    },
                        
    launch: function() {
        var appSettings = Ext.create('Rally.technicalservices.prbDashboard.Settings');

        var tpl = new Rally.technicalservices.prbDashboard.Template(appSettings.getFieldMappings());

        var data = {
            BU: 'PwM',
            Project: 'Baird Online Transformation Program (BOL)',
            S: 'Pete Duback, Ryan Burwell',
            EC: 'Mike Schroeder',
            PM: 'John Ellison',
            BL: 'Joe Ghali',
            VSM: 'Beth Howell',
            SLT: 'Jonathan Cohn',
            StartDate: 'Dec 2013',
            Release: '10/7/15',
            EndDate: 'Q2 2016',
            NextKeyMilestone: '9/30: Money Movement Project Kick-off',
            ProjectHealth: 'ph',
            ProjectHealthTimeline: '#0FF000',
            ProjectHealthScope: 'pht',
            ProjectHealthQuality: 'phq',
            ProjectHealthResources: '#FF0000',
            ProjectHealthBudgetSpend: '#0000FF',
            ProjectHealthChange: '#00FF00',
            LinkField: 'https://www.google.com/',
            Budget: '$1.7M'
        };


        this.add({
            xtype: 'container',
            tpl: tpl,
            margin: '0 100 0 100',
            flex: 1
        }).update(data);

    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('prb-dashboard', {
                   name: 'PRB Dashboard'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

table {
    border-collapse: collapse;
    width: 100%;
}

th {
    background-color: #c0c0c0;
    padding: 5px;
    font-family: ProximaNovaSemiBold, Helvetica, Arial;
}

td {
    padding: 10px;
    font-family: ProximaNova, Helvetica, Arial;
}

table, th, td {
    border: 1px solid black;
}
    </style>

</head>
<body></body>
</html>