<!DOCTYPE html>
<html>
<head>
    <title>PRB Dashboard</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Wed Feb 17 2016 08:46:36 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Wed Feb 17 2016 08:46:36 GMT-0700 (MST)";
        var CHECKSUM = 20319813418;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.window.Print',{
    extend: 'Ext.Window',
    logger: new Rally.technicalservices.Logger(),

    show: function(element, printAreaRatio){

        var win = window.open('', this.title, 'width=200,location=no,left=200px,toolbar=0,scrollbars=0,status =0');

        var maxPixelsPerPage = element.offsetWidth * printAreaRatio;

        var headerRow = element.getElementsByTagName('thead')[0];
        var rows = element.getElementsByTagName('tbody');
        var footerRow = element.getElementsByTagName('tfoot')[0];

        var current_date = Rally.util.DateTime.formatWithDefault(new Date());

        var pageHeight = 0,
            html = '<!DOCTYPE html><html><head><title>Executive Summary - Portfolio Highlights - Status as of: ' + current_date + ' </title>';
        html += '<style>' + this._getStyleSheet() + '</style></head>';

        html += '"<body onload=\"window.print(); window.close();\"><table class=\"prbtable\">';
        html += headerRow.outerHTML;
        pageHeight += headerRow.offsetHeight;

        var pageNumber = 1;

        for (var i=1; i<rows.length; i++){
            if ((pageHeight + rows[i].offsetHeight) > maxPixelsPerPage){
                html += footerRow.outerHTML.replace("pageNumber", "Page " + pageNumber++) + '</table><table class="prbtable">';
                pageHeight = headerRow.offsetHeight;
                html +=  headerRow.outerHTML;
            }
            html += rows[i].outerHTML;
            pageHeight += rows[i].offsetHeight;
        }
        html += footerRow.outerHTML.replace("pageNumber", "Page " + pageNumber++) + '</table></body></html>';

        win.document.write(html);
        win.document.close();
    },
    _getStyleSheet: function(){
        var style = "<style>" +
            "@page { size: letter landscape; margin: 0.1in 0.1in 0.1in 0.1in; }" +
            "@media all { " +
                    "body {margin: 5;}" +
                    "header {height: 0.5in; font-family: ProximaNovaSemiBold, Helvetica, Arial; text-align:center;width:100%;font-size:9pt;}" +
                    "footer {height: 0.25in; width:100%; page-break-after:always; vertical-align: bottom;}" +
                    "th.prb { background-color: #c0c0c0; padding: 0.1in; font-family: ProximaNovaSemiBold, Helvetica, Arial; font-size:10pt;}" +
                    "td.prb { padding-top:  0.1in; padding-bottom:  0.1in; padding-left:  0.1in; padding-right:  0.1in; font-size:9pt;font-family: ProximaNova, Helvetica, Arial; page-break-inside: avoid; page-break-after:auto; }" +
                    ".prb { border: 1px solid black; }" +
                    "thead {display: table-header-group;}" +
                    "table.prbtable{ border-collapse: collapse; width: 100%;page-break-after:always;}" +
                    ".prbheader { border:0; text-align:center; font-size:10pt; font-family: ProximaNova, Helvetica, Arial; padding:0.1in;}" +
                    ".fleft {vertical-align: bottom; padding-top: 0.25in;font-family: ProximaNova, Helvetica, Arial; text-align:left;font-size:9pt; }" +
                    ".fcenter {vertical-align: bottom;  font-family: ProximaNova, Helvetica, Arial; text-align:center;font-size:9pt;}" +
                    ".fright {vertical-align: bottom;  font-family: ProximaNova, Helvetica, Arial; text-align:right;font-size:9pt;}" +
                "}" +
            "</style>";

        return style;
    }
});
Ext.define('Rally.technicalservices.prbDashboard.Template',{
    extend: 'Ext.XTemplate',

    tbdText: 'TBD',
    prbView: 'prb',
    footerLeft: "Robert W. Baird Confidential",
    footerCenter: 'Project Health Key: <span style="text-decoration:underline;"><b>T</b></span>imeline, <span style="text-decoration:underline;"><b>S</b></span>cope, <span style="text-decoration:underline;"><b>Q</b></span>uality, <span style="text-decoration:underline;"><b>R</b></span>esources, <span style="text-decoration:underline;"><b>B</b></span>udget Spend, <span style="text-decoration:underline;"><b>C</b></span>hange',

    getHealthColor: function(field, values){
        var re = /color=\"(.*)\"/i,
            color = values[field] || '#FFFFFF',
            match = color.match(re);

        if (match && match.length > 1){
            color = match[1];
        }
        return color;
    },

    getProjectTitle: function(values){
        var parent = this.noParentString;

        if (values.Parent){
            parent = values.Parent.Name || parent;
        }
        return this.getStringValue(parent + ' - ' + values.Name);
    },
    getFormattedDate: function(field, values){
        if (field && values[field]){
            var dt = Rally.util.DateTime.fromIsoString(values[field]);
            if (dt){
                return Rally.util.DateTime.format(dt, 'M Y');
            }
        }
        return null;
    },
    getStringValue: function(text){
        if (text){
            return Ext.String.ellipsis(text, this.maxChars, true);
        }
        return '&nbsp;';

    },
    getTitleRowSpan: function(){
        if (this.showPRBView()){
            return 3;
        }
        return 2;
    },
    showPRBView: function(){
        return this.prbView === 'prb';
    },
    getCurrentDate: function(){
        return Rally.util.DateTime.formatWithDefault(new Date());
    },
    constructor: function(config) {
       var templateConfig = [
           '<tpl>',
        '<table class="prbtable" id="prb-table">',
                '<thead><tr style="border:0;"><th colspan="10" class="prbheader">Executive Dashboard - Portfolio Highlights<br/>Status as of: {[this.getCurrentDate()]}</th></tr><tr>',
                    '<th class="prb" width="25%">BU/CRG - Project Title</th>',
                    '<th class="prb" width="25%">Sponsors (S), (EC)</br>Project Manager (PM), BU Lead (BL)</th>',
                    '<th class="prb" width="15%">Start Date (S)</br>Release (R)</br>End Date (E)</th>',
                    '<th class="prb" width="20%">Next Key Milestone</th>',
                    '<th class="prb" colspan="6"><b>Project Health and Budget Spend:</b></br>(w/IT Cmte ask if needed)</th>',
                '</tr></thead>',
                '<tpl foreach=".">',
                    '<tbody><tr>',
                        '<td class="prb" rowspan="{[this.getTitleRowSpan()]}">{[this.getProjectTitle(values)]}</td>',
                        '<td class="prb" rowspan="2">',
                            '<tpl if="values[this.sponsorField]">{[this.getStringValue(values[this.sponsorField])]} (S)</br></tpl>',
                            '<tpl if="values[this.ecField]">{[this.getStringValue(values[this.ecField])]} (EC)</br></tpl>',
                            '<tpl if="values[this.pmField]">{[this.getStringValue(values[this.pmField])]} (PM)</br></tpl>',
                            '<tpl if="values[this.blField]">{[this.getStringValue(values[this.blField])]} (BL)</br></tpl>',
                        '</td>',
                        '<td class="prb" rowspan="2">',
                            '<tpl if="values[this.startDateField]">{[this.getFormattedDate(this.startDateField, values)]}<tpl else>{[this.tbdText]}</tpl> (S)</br>',
                            '<tpl if="values[this.releaseDateField]">{[this.getFormattedDate(this.releaseDateField, values)]}<tpl else>{[this.tbdText]}</tpl> (R)</br>',
                            '<tpl if="values[this.endDateField]">{[this.getFormattedDate(this.endDateField, values)]}<tpl else>{[this.tbdText]}</tpl> (E)</br>',
                        '</td>',
                        '<td class="prb" rowspan="2">{[this.getStringValue(values[this.nextKeyMilestoneField])]}</td>',
                        '<td class="prb" colspan="6"><tpl if="values[this.questionField]">{[this.getStringValue(values[this.questionField])]}</tpl></td>',
                    '</tr>',
                   '<tpl if="this.showPRBView()">',
                       '<tr>',
                           '<td class="prb" style="background-color:{[this.getHealthColor(this.projectHealthField, values)]};">H</td>',
                           '<td class="prb" colspan="5"><tpl if="values[this.budgetSpentField]">{[this.getStringValue(values[this.budgetSpentField])]}<tpl if="values[this.totalBudgetField]"> of {[this.getStringValue(values[this.totalBudgetField])]}</tpl></tpl></td>',
                       '</tr><tr>',
                       '<td class="prb">',
                           '<tpl if="values[this.vsmField]">{[this.getStringValue(values[this.vsmField])]} (VSM),</tpl>',
                           '<tpl if="values[this.sltField]">{[this.getStringValue(values[this.sltField])]} (SLT)</tpl>',
                       '</td>',
                       '<td class="prb">',
                           '<tpl if="values[this.linkField]"><a href="{[values[this.linkField]]}" target="_blank">Status Report</a></tpl>',
                       '</td>',
                       '<td class="prb">',
                        '</td>',
                       '<td class="prb" style="background-color:{[this.getHealthColor(this.projectHealthTimelineField, values)]};">T</td>',
                       '<td class="prb" style="background-color:{[this.getHealthColor(this.projectHealthScopeField, values)]};">S</td>',
                       '<td class="prb" style="background-color:{[this.getHealthColor(this.projectHealthQualityField, values)]};">Q</td>',
                       '<td class="prb" style="background-color:{[this.getHealthColor(this.projectHealthResourcesField, values)]};">R</td>',
                       '<td class="prb" style="background-color:{[this.getHealthColor(this.projectHealthBudgetSpendField, values)]};">B</td>',
                       '<td class="prb" style="background-color:{[this.getHealthColor(this.projectHealthChangeField, values)]};">C</td>',
                    '</tr></tbody><tpl else>',  //ITC View
                       '<tr>',
                            '<td class="prb" style="width:2%;padding-left:0px;padding-right:0px;text-align:center;background-color:{[this.getHealthColor(this.projectHealthField, values)]};">H</td>',
                            '<td class="prb" colspan="5"><tpl if="values[this.budgetSpentField]">{[this.getStringValue(values[this.budgetSpentField])]}<tpl if="values[this.totalBudgetField]"> of {[this.getStringValue(values[this.totalBudgetField])]}</tpl></tpl></td>',
                       '</tr></tbody>',
                    '</tpl>',
                '</tpl>',
               '<tfoot><tr style="border:0;">',
               '<td class="fleft">{[this.footerLeft]}</td>',
               '<td colspan="3" class="fcenter">{[this.footerCenter]}</td>',
               '<td colspan="6" class="fright">pageNumber</td>',
               '</tr></tfoot>',
           '</table></tpl>'
       ];

        templateConfig.push(config);

        return this.callParent(templateConfig);
    }
});

Ext.define('Rally.technicalservices.combobox.AllowedFieldTypesCombobox', {
        requires: [],
        extend: 'Rally.ui.combobox.FieldComboBox',
        alias: 'widget.tsallowedfieldtypecombobox',

    _isNotHidden: function(field) {
        var allowedTypes = this.allowedTypes || [];
        if (!field.hidden && field.attributeDefinition && Ext.Array.contains(allowedTypes, field.attributeDefinition.AttributeType)){
            return true;
        }
        return false;
    },
    _populateStore: function() {
        if (!this.store) {
            return;
        }

        var data = _.sortBy(
            _.map(
                _.filter(this.model.getFields(), this._isNotHidden, this),
                this._convertFieldToLabelValuePair,
                this
            ),
            'name'
        );

        this.store.loadRawData(data);
        this.setDefaultValue();
        this.onReady();
    }
});
Ext.define('Rally.technicalservices.prbDashboard.Settings',{



    getFieldMappings: function(settings){
        //todo - as we add more app settings that aren't fields, we will need to filter these out
        return settings;
    },
    statics: {
        fieldLabels: {
            sponsorField: 'Business Sponsor Field',
            ecField: 'EC Field',
            pmField: 'PM Field',
            blField: 'BU Lead Field',
            sltField: 'SLT Field',
            vsmField: 'VSM Field',
            startDateField: 'Start Date Field',
            endDateField: 'End Date Field',
            releaseDateField: 'Release Date Field',
            nextKeyMilestoneField: 'NextKeyMilestone Field',
            projectHealthField: 'Project Health Field',
            projectHealthTimelineField: 'Project Health Timeline Field',
            projectHealthScopeField: 'Project Health Scope Field',
            projectHealthQualityField: 'Project Health Quality Field',
            projectHealthResourcesField: 'Project Health Resources Field',
            projectHealthBudgetSpendField: 'Project Health Budget Spend Field',
            projectHealthChangeField: 'Project Health Change Field',
            totalBudgetField: 'Total Budget Field',
            budgetSpentField: 'Budget Spent Field',
            linkField: 'Status Report Link Field',
            questionField: 'Ask of ITC'
        },

        getFields: function (model, modelDisplayName,printAreaValue) {
            var labelWidth = 250,
                fields = [];

            fields.push({
                xtype: 'textarea',
                fieldLabel: modelDisplayName + ' Query',
                name: 'reportQuery',
                anchor: '100%',
                cls: 'query-field',
                margin: '0 70 25 0',
                labelWidth: 150,
                plugins: [
                    {
                        ptype: 'rallyhelpfield',
                        helpId: 194
                    },
                    'rallyfieldvalidationui'
                ],
                validateOnBlur: false,
                validateOnChange: false,
                validator: function(value) {
                    try {
                        if (value) {
                            Rally.data.wsapi.Filter.fromQueryString(value);
                        }
                        return true;
                    } catch (e) {
                        return e.message;
                    }
                }
            });

            fields.push({
                xtype: 'rallynumberfield',
                name: 'maxChars',
                minValue: 0,
                fieldLabel: "Max Characters",
                labelAlign: 'right',
                labelWidth: labelWidth,
            });

            _.each(this.fieldLabels, function (label, name) {

                var allowedTypes = ['STRING','TEXT'];
                if (/DateField/.test(name)){
                    allowedTypes = ['DATE'];
                }
                fields.push({
                    xtype: 'tsallowedfieldtypecombobox',
                    allowedTypes: allowedTypes,
                    model: model,
                    name: name,
                    fieldLabel: label,
                    labelAlign: 'right',
                    labelWidth: labelWidth,
                    width: 500
                });
            });

            fields.push({
                xtype: 'container',
                layout: 'hbox',
                margin: '25 0 0 0',
                items: [{
                    xtype: 'slider',
                    name: 'printAreaRatio',
                    fieldLabel: 'Print Area Ratio',
                    labelAlign: 'right',
                    width: labelWidth + 200,
                    labelWidth: labelWidth,
                    minValue: 1,
                    hideLabel: false,
                    useTips: false,
                    increment: 1,
                    maxValue: 100,
                    value: printAreaValue
                },{
                    xtype: 'container',
                    margin: '0 0 0 25',
                    html: 'This slider adjusts the number of pixels that will be fit onto one page when printed.<br/>The higher this number, the more will be fit onto a page.  If this number is too high, then the pages will not break properly in the print view.'
                }]
            });

            return fields;
        }
    }
});

Ext.define("prb-dashboard", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },

    config: {
        defaultSettings: {

                reportQuery: null,
                model: 'PortfolioItem/ProgramorProject',
                maxChars: 100,
                noParentString: '(No Parent)',
            printAreaRatio: 42,

                sponsorField: 'Name',
                ecField: 'Name',
                pmField: 'Name',
                blField: 'Name',
                sltField: 'Name',
                vsmField: 'Name',
                startDateField: 'PlannedStartDate',
                endDateField: 'PlannedEndDate',
                releaseDateField: 'ActualEndDate',
                nextKeyMilestoneField: 'Name',
                projectHealthField: 'DisplayColor',
                projectHealthTimelineField: 'DisplayColor',
                projectHealthScopeField: 'DisplayColor',
                projectHealthQualityField: 'DisplayColor',
                projectHealthResourcesField: 'DisplayColor',
                projectHealthBudgetSpendField: 'DisplayColor',
                projectHealthChangeField: 'DisplayColor',
                totalBudgetField: 'Name',
                budgetSpentField: 'Name',
                linkField: 'Name'
        }
    },

    integrationHeaders : {
        name : "prb-dashboard"
    },

    launch: function() {
        this.fetchData();
    },
    fetchData: function(){

        var model = this.getSetting('model'),
            fetchFields = ['Parent','Name','ObjectID'].concat(_.values(this.getSettings())),
            storeConfig = {
                model: model,
                fetch: fetchFields,
                limit: 'Infinity',
                sorters: [{
                    property: 'DragAndDropRank',
                    direction: 'ASC'
                }]
            },
            query = this.getSetting('reportQuery') || null;
        this.logger.log('Query', query, 'Fetch', fetchFields);
        if (query){
            storeConfig.filters = Rally.data.wsapi.Filter.fromQueryString(query);
        }

        Ext.create('Rally.data.wsapi.Store',storeConfig).load({
            scope: this,
            callback: this.runReport
        });

    },
    _addParentFilter: function(ct, items){

        var noParentString = this.getSetting('noParentString'),
            parents = _.uniq(_.map(items, function(item){ return item.Parent && item.Parent.Name || noParentString;}));
        parents = _.map(parents, function(p){
            var val = p;
            if (p === noParentString){
                val = null;
            }
            return {name: p, value: p};
        });
        this.logger.log('_addParentFilter', parents);


        var cb = ct.add({
            xtype: 'rallycombobox',
            fieldLabel: 'BU/CRG',
            labelAlign: 'right',
            itemId: 'cb-bu',
            store: Ext.create('Rally.data.custom.Store',{
                fields: ['name','value'],
                data: parents
            }),
            displayField: 'name',
            valueField: 'value',
            allowNoEntry: true,
            noEntryText: '-- No BU/CRG --',
            multiSelect: true,
            width: 500
        });
        cb.on('change', this._updateReport, this);

        var cbView = ct.add({
            xtype: 'rallycombobox',
            fieldLabel: 'View',
            itemId: 'cb-view',
            labelAlign: 'right',
            store: Ext.create('Rally.data.custom.Store',{
                fields: ['name','value'],
                data: [{ name: 'PRB View', value: 'prb' },{ name:'ITC View', value: 'itc'}]
            }),
            displayField: 'name',
            valueField: 'value',
            allowNoEntry: false,
            noEntryText: '-- No BU/CRG --',
            width: 250
        });
        cbView.on('change', this._updateReport, this);

    },
    runReport: function(portfolioItems, operation){
        this.logger.log('_runReport', portfolioItems, operation);
        this.removeAll();


        //var items = _.sortBy(_.map(portfolioItems, function(pi) {
        //    return pi.getData();
        //}), function(pi){ return pi.Parent && pi.Parent.Name || "ZZZ";});

        var items = _.map(portfolioItems, function(pi) {
            return pi.getData();
        });


        this.portfolioItems = items;

        this._addHeaderComponents(items);

        this._updateReport();

    },
    _addHeaderComponents: function(items){

        var ct = this.add({
            xtype: 'container',
            layout: 'hbox'
        });

        this._addParentFilter(ct, items);

        ct.add({
            xtype: 'container',
            margin: '0 15 15 15',
            itemId: 'ct-num-items',
            flex: 1,
            tpl: '<tpl>{count} items found.</tpl>'
        });

        //ct.add({
        //    xtype: 'container',
        //    margin: '0 0 0 0',
        //    itemId: 'ct-project-health-key',
        //    flex: 1,
        //    html: 'Project Health Key: <span style="text-decoration:underline;"><b>T</b></span>imeline, <span style="text-decoration:underline;"><b>S</b></span>cope, <span style="text-decoration:underline;"><b>Q</b></span>uality, <span style="text-decoration:underline;"><b>R</b></span>esources, <span style="text-decoration:underline;"><b>B</b></span>udget Spend, <span style="text-decoration:underline;"><b>C</b></span>hange'
        //});


    },
    getPRBView: function(){
        return this.down('#cb-view') && this.down('#cb-view').getValue() || 'prb';
    },
    _printPrb: function(){
        var printAreaRatio = this.getSetting('printAreaRatio')/100;

        var win = Ext.create('Rally.technicalservices.window.Print');
        win.show(Ext.getElementById('prb-table'),printAreaRatio);
    },
    _updateReport: function(){

        var cb = this.down('#cb-bu'),
            filters = cb && cb.getValue() || [];

        var filteredItems = this.portfolioItems;
        if (filters.length > 0){
            filteredItems = _.filter(filteredItems, function(item){
                var parent = item.Parent && item.Parent.Name || null;
                return Ext.Array.contains(filters, parent);
            });
        }
        this.logger.log('filteredItems', filters, filteredItems)

        if (this.down('#tpl-report')){
            this.down('#tpl-report').destroy();
        }

        var appSettings = Ext.create('Rally.technicalservices.prbDashboard.Settings', this.getSettings()),
            tplConfig = appSettings.getFieldMappings(this.getSettings()),
            noParentString = "(No Parent)";

        tplConfig.maxChars = this.getSetting('maxChars');
        tplConfig.noParentString = noParentString;
        tplConfig.prbView = this.getPRBView();

        var tpl = new Rally.technicalservices.prbDashboard.Template(tplConfig);

        this.add({
            xtype: 'container',
            itemId: 'tpl-report',
            tpl: tpl,
            margin: '0 100 0 100',
            flex: 1
        }).update(filteredItems);
        this.down('#ct-num-items').update({count: filteredItems.length});
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            },{
                text: 'Print...',
                handler: this._printPrb,
                scope: this
            }
        ];
    },
    getSettingsFields: function(){
        var modelDisplayName = "Program or Project";
        return Rally.technicalservices.prbDashboard.Settings.getFields(this.getSetting('model'),modelDisplayName, Number(this.getSetting('printAreaRatio')));
    },
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },

    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },

    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        this.fetchData();
    }
});

            
               Rally.launchApp('prb-dashboard', {
                   name: 'PRB Dashboard'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

table.prbtable{ border-collapse: collapse; width: 100%; margin: 25px; }

th.prb { background-color: #c0c0c0; padding: 5px; font-family: ProximaNovaSemiBold, Helvetica, Arial; }

td.prb { padding-top: 3px; padding-bottom: 3px; padding-left: 10px; padding-right: 10px; font-family: ProximaNova, Helvetica, Arial; }

tr.bodyhead { display: none; }

.prb { border: 1px solid black; }

.prbheader {
    border:0;
    text-align:center;
    font-size:10pt;
    font-family: ProximaNova, Helvetica, Arial;
    padding: 3px;
}

.prbfooter {
    border:0;
    text-align:center;
    font-size:9pt;
    font-family: ProximaNova, Helvetica, Arial;
    padding: 3px;
}
tfoot {font-family: ProximaNova, Helvetica, Arial; font-size:9pt; }

.fleft { text-align:left;padding:10px;}
.fcenter { text-align:center;}
.fright { text-align:right; display:none;}
    </style>

</head>
<body></body>
</html>